if (i != tpd) {
for (l in 1:gid) {
opponents <- c(opponents,divs[j,(i+1):tpd])
}
}
if (j != divisions) {
for (l in 1:times) {
aodt <- ifelse(divs[j,i] %in% ODM,odt-table(ODM)[names(table(ODM))==divs[j,i]],odt)
newO <- sample(divs[-(1:j),],aodt)
opponents <- c(opponents,newO)
if (god.type == "teams") {
ODM <- c(ODM,newO,rep(divs[j,i],length(newO)))
}
}
}
order <- sample(opponents)#,(tpd-i)*divisions+(odt-tpd*(j-1))*times)
Home <- c(Home,rep(divs[j,i],length(order)))
Visitor <- c(Visitor,order)
}
}
Dat <- vector()
L <- length(Home)/weeks
for (i in (weeks-1):0) {
Dat <- c(Dat,enddate-i*7-2)
}
Date <- c(rep(Dat,floor(L)),Dat[1:((L-floor(L))*weeks)])
if (length(Home) > length(Date)) {
Date <- c(Dat[(length(Dat)+1-abs(length(Home)-length(Date))):length(Dat)],Date)
} else {
if (length(Home) < length(Date)) {
Date <- Date[1:(length(Date)-abs(length(Home)-length(Date)))]
}
}
HPTS <- vector()
VPTS <- vector()
for (i in 1:length(Home)) {
if (type=="BT") {
prb <- BTWP(TST$Strength[TST$Team==Home[i]],TST$Strength[TST$Team==Visitor[i]],FALSE)
HPTS <- c(HPTS,sample(1:0,1,prob=c(prb,1-prb)))
VPTS <- c(VPTS,ifelse(HPTS[i]==1,0,1))
} else {
prb <- MWP(TST$Strength[TST$Team==Home[i]],TST$Strength[TST$Team==Visitor[i]],FALSE)
HPTS <- c(HPTS,sample(1:0,1,prob=c(prb,1-prb)))
VPTS <- c(VPTS,ifelse(HPTS[i]==1,0,1))
}
}
Winner <- ifelse(VPTS > HPTS,Visitor,Home)
Loser <- ifelse(VPTS < HPTS,Visitor,Home)
df <- data.frame(Date,Visitor,VPTS,Home,HPTS,Winner,Loser)
df <- df[order(df$Date),]
df$Date <- as.Date(df$Date,origin="1970-01-01")
df$Day <- substr(weekdays(df$Date),1,3)
`OT?` <- rep("NO",length(Home))
df <- data.frame(Date=df$Date,Day=df$Day,Visitor=df$Visitor,VPTS=df$VPTS,Home=df$Home,HPTS=df$HPTS,`OT?`,Winner=df$Winner,Loser=df$Loser)
df$Date <- as.Date(df$Date,origin="1970-01-01")
df$Day <- as.character(df$Day)
df$Home <- as.character(df$Home)
df$Visitor <- as.character(df$Visitor)
df$Winner <- as.character(df$Winner)
df$Loser <- as.character(df$Loser)
df$HPTS <- as.numeric(df$HPTS)
df$VPTS <- as.numeric(df$VPTS)
return(df)
}
progresspredict.simulation <- function(teams, weeks=NULL, strengths=NULL, drawtype=NULL, divisions,
gid, god=NULL, god.type="times", enddate=Sys.Date(), type="BT",
simulations=1000, arg1=NULL, arg2=NULL, arg3=NULL) {
if (length(teams) > 1) {
N <- length(teams)
} else {
N <- teams
}
strengthsTM <- rep(0, N)
strengthsBT <- rep(0, N)
wins <- rep(0, N)
strongTM <- matrix(0, N, simulations)
strongBT <- matrix(0, N, simulations)
varsTM <- rep(0, N)
varsBT <- rep(0, N)
prcntTM <- vector()
prcntBT <- vector()
if (length(teams) > 1 && length(strengths) > 1) {
swtch <- TRUE
} else {
swtch <- FALSE
}
if (length(teams) > 1) {
Team <- teams
teamsC <- length(teams)
if (is.null(weeks)) {
weeks <- teamsC
}
} else {
if (is.null(weeks)) {
weeks <- teams
}
teamsC <- teams
pkmn <- sort(c("Bulbasaur", "Ivysaur", "Venusaur", "Charmander", "Charmeleon", "Charizard", "Squirtle", "Wartortle", "Blastoise", "Caterpie", "Metapod", "Butterfree", "Weedle", "Kakuna", "Beedrill", "Pidgey", "Pidgeotto", "Pidgeot", "Rattata", "Raticate", "Spearow", "Fearow", "Ekans", "Arbok", "Pichu", "Pikachu", "Raichu", "Sandshrew", "Sandslash", "NidoranM","NidoranF", "Nidorina", "Nidoqueen", "Nidorino", "Nidoking", "Cleffa", "Clefairy", "Clefable", "Vulpix", "Ninetales", "Igglybuff", "Jigglypuff", "Wigglytuff", "Zubat", "Golbat", "Crobat", "Oddish", "Gloom", "Vileplume", "Bellossom", "Paras", "Parasect", "Venonat", "Venomoth", "Diglett", "Dugtrio", "Meowth",
"Persian", "Psyduck", "Golduck", "Mankey", "Primeape", "Growlithe", "Arcanine", "Poliwag", "Poliwhirl", "Poliwrath", "Politoed", "Abra", "Kadabra", "Alakazam", "Machop", "Machoke", "Machamp", "Bellsprout", "Weepinbell", "Victreebel", "Tentacool", "Tentacruel", "Geodude", "Graveler", "Golem", "Ponyta", "Rapidash", "Slowpoke", "Slowbro", "Slowking", "Magnemite", "Magneton", "Magnezone", "Farfetchd", "Doduo", "Dodrio", "Seel", "Dewgong", "Grimer", "Muk", "Shellder", "Cloyster", "Gastly", "Haunter", "Gengar", "Onix", "Steelix", "Drowzee", "Hypno", "Krabby", "Kingler", "Voltorb", "Electrode", "Exeggcute", "Exeggutor", "Kangaskhan", "Cubone",
"Marowak", "Tyrogue", "Hitmonlee", "Hitmonchan", "Hitmontop", "Lickitung", "Lickilicky", "Koffing", "Weezing", "Rhyhorn", "Rhydon", "Rhyperior", "Happiny", "Chansey", "Blissey", "Tangela", "Tangrowth", "Horsea", "Seadra", "Kingdra", "Goldeen", "Seaking", "Staryu", "Starmie", "MimeJr", "MrMime", "Scyther", "Scizor", "Smoochum", "Jynx", "Elekid", "Electabuzz", "Electivire", "Magby", "Magmar", "Magmortar", "Pinsir", "Tauros", "Miltank", "Magikarp", "Gyarados", "Lapras", "Ditto", "Eevee", "Vaporeon", "Jolteon", "Flareon", "Espeon", "Umbreon", "Leafeon", "Glaceon", "Sylveon", "Porygon", "Porygon2", "PorygonZ", "Omanyte", "Omastar", "Kabuto",
"Kabutops", "Aerodactyl", "Munchlax", "Snorlax", "Articuno", "Zapdos", "Moltres", "Dratini", "Dragonair", "Dragonite", "Mewtwo", "Mew", "Chikorita", "Bayleef", "Meganium", "Cyndaquil", "Quilava", "Typhlosion", "Totodile", "Croconaw", "Feraligatr", "Sentret", "Furret", "Hoothoot", "Noctowl", "Ledyba", "Ledian", "Spinarak", "Ariados", "Chinchou", "Lanturn", "Togepi", "Togetic", "Togekiss", "Natu", "Xatu", "Mareep", "Flaaffy", "Ampharos", "Azurill", "Marill", "Azumarill", "Bonsly", "Sudowoodo", "Hoppip", "Skiploom", "Jumpluff", "Aipom", "Ambipom", "Sunkern", "Sunflora", "Yanma", "Yanmega", "Wooper", "Quagsire", "Murkrow", "Honchkrow",
"Misdreavus", "Mismagius", "Unown", "Wynaut", "Wobbuffet", "Girafarig", "Pineco", "Forretress", "Dunsparce", "Gligar", "Gliscor", "Snubbull", "Granbull", "Qwilfish", "Shuckle", "Heracross", "Sneasel", "Weavile", "Teddiursa", "Ursaring", "Slugma", "Magcargo", "Swinub", "Piloswine", "Mamoswine", "Corsola", "Remoraid", "Octillery", "Delibird", "Mantyke", "Mantine", "Skarmory", "Houndour", "Houndoom", "Phanpy", "Donphan", "Stantler", "Smeargle", "Raikou", "Entei", "Suicune", "Larvitar", "Pupitar", "Tyranitar", "Lugia", "HoOh", "Celebi", "Treecko", "Grovyle", "Sceptile", "Torchic", "Combusken", "Blaziken", "Mudkip", "Marshtomp", "Swampert",
"Poochyena", "Mightyena", "Zigzagoon", "Linoone", "Wurmple", "Silcoon", "Beautifly", "Cascoon", "Dustox", "Lotad", "Lombre", "Ludicolo", "Seedot", "Nuzleaf", "Shiftry", "Taillow", "Swellow", "Wingull", "Pelipper", "Ralts", "Kirlia", "Gardevoir", "Gallade", "Surskit", "Masquerain", "Shroomish", "Breloom", "Slakoth", "Vigoroth", "Slaking", "Nincada", "Ninjask", "Shedinja", "Whismur", "Loudred", "Exploud", "Makuhita", "Hariyama", "Nosepass", "Probopass", "Skitty", "Delcatty", "Sableye", "Mawile", "Aron", "Lairon", "Aggron", "Meditite", "Medicham", "Electrike", "Manectric", "Plusle", "Minun", "Volbeat", "Illumise", "Budew", "Roselia",
"Roserade", "Gulpin", "Swalot", "Carvanha", "Sharpedo", "Wailmer", "Wailord", "Numel", "Camerupt", "Torkoal", "Spoink", "Grumpig", "Spinda", "Trapinch", "Vibrava", "Flygon", "Cacnea", "Cacturne", "Swablu", "Altaria", "Zangoose", "Seviper", "Lunatone", "Solrock", "Barboach", "Whiscash", "Corphish", "Crawdaunt", "Baltoy", "Claydol", "Lileep", "Cradily", "Anorith", "Armaldo", "Feebas", "Milotic", "Castform", "Kecleon", "Shuppet", "Banette", "Duskull", "Dusclops", "Dusknoir", "Tropius", "Chingling", "Chimecho", "Absol", "Snorunt", "Glalie", "Froslass", "Spheal", "Sealeo", "Walrein", "Clamperl", "Huntail", "Gorebyss", "Relicanth", "Luvdisc",
"Bagon", "Shelgon", "Salamence", "Beldum", "Metang", "Metagross", "Regirock", "Regice", "Registeel", "Latias", "Latios", "Kyogre", "Groudon", "Rayquaza", "Jirachi", "Deoxys", "Turtwig", "Grotle", "Torterra", "Chimchar", "Monferno", "Infernape", "Piplup", "Prinplup", "Empoleon", "Starly", "Staravia", "Staraptor", "Bidoof", "Bibarel", "Kricketot", "Kricketune", "Shinx", "Luxio", "Luxray", "Cranidos", "Rampardos", "Shieldon", "Bastiodon", "Burmy", "Wormadam", "Mothim", "Combee", "Vespiquen", "Pachirisu", "Buizel", "Floatzel", "Cherubi", "Cherrim", "Shellos", "Gastrodon", "Drifloon", "Drifblim", "Buneary", "Lopunny", "Glameow", "Purugly",
"Stunky", "Skuntank", "Bronzor", "Bronzong", "Chatot", "Spiritomb", "Gible", "Gabite", "Garchomp", "Riolu", "Lucario", "Hippopotas", "Hippowdon", "Skorupi", "Drapion", "Croagunk", "Toxicroak", "Carnivine", "Finneon", "Lumineon", "Snover", "Abomasnow", "Rotom", "Uxie", "Mesprit", "Azelf", "Dialga", "Palkia", "Heatran", "Regigigas", "Giratina", "Cresselia", "Phione", "Manaphy", "Darkrai", "Shaymin", "Arceus", "Victini", "Snivy", "Servine", "Serperior", "Tepig", "Pignite", "Emboar", "Oshawott", "Dewott", "Samurott", "Patrat", "Watchog", "Lillipup", "Herdier", "Stoutland", "Purrloin", "Liepard", "Pansage", "Simisage", "Pansear", "Simisear",
"Panpour", "Simipour", "Munna", "Musharna", "Pidove", "Tranquill", "Unfezant", "Blitzle", "Zebstrika", "Roggenrola", "Boldore", "Gigalith", "Woobat", "Swoobat", "Drilbur", "Excadrill", "Audino", "Timburr", "Gurdurr", "Conkeldurr", "Tympole", "Palpitoad", "Seismitoad", "Throh", "Sawk", "Sewaddle", "Swadloon", "Leavanny", "Venipede", "Whirlipede", "Scolipede", "Cottonee", "Whimsicott", "Petilil", "Lilligant", "Basculin", "Sandile", "Krokorok", "Krookodile", "Darumaka", "Darmanitan", "Maractus", "Dwebble", "Crustle", "Scraggy", "Scrafty", "Sigilyph", "Yamask", "Cofagrigus", "Tirtouga", "Carracosta", "Archen", "Archeops", "Trubbish",
"Garbodor", "Zorua", "Zoroark", "Minccino", "Cinccino", "Gothita", "Gothorita", "Gothitelle", "Solosis", "Duosion", "Reuniclus", "Ducklett", "Swanna", "Vanillite", "Vanillish", "Vanilluxe", "Deerling", "Sawsbuck", "Emolga", "Karrablast", "Escavalier", "Foongus", "Amoonguss", "Frillish", "Jellicent", "Alomomola", "Joltik", "Galvantula", "Ferroseed", "Ferrothorn", "Klink", "Klang", "Klinklang", "Tynamo", "Eelektrik", "Eelektross", "Elgyem", "Beheeyem", "Litwick", "Lampent", "Chandelure", "Axew", "Fraxure", "Haxorus", "Cubchoo", "Beartic", "Cryogonal", "Shelmet", "Accelgor", "Stunfisk", "Mienfoo", "Mienshao", "Druddigon", "Golett", "Golurk",
"Pawniard", "Bisharp", "Bouffalant", "Rufflet", "Braviary", "Vullaby", "Mandibuzz", "Heatmor", "Durant", "Deino", "Zweilous", "Hydreigon", "Larvesta", "Volcarona", "Cobalion", "Terrakion", "Virizion", "Tornadus", "Thundurus", "Reshiram", "Zekrom", "Landorus", "Kyurem", "Keldeo", "Meloetta", "Genesect", "Chespin", "Quilladin", "Chesnaught", "Fennekin", "Braixen", "Delphox", "Froakie", "Frogadier", "Greninja", "Bunnelby", "Diggersby", "Fletchling", "Fletchinder", "Talonflame", "Scatterbug",
"Spewpa", "Vivillon", "Litleo", "Pyroar", "Flabébé", "Floette", "Florges", "Skiddo", "Gogoat", "Pancham", "Pangoro", "Furfrou", "Espurr", "Meowstic", "Honedge", "Doublade", "Aegislash", "Spritzee", "Aromatisse", "Swirlix", "Slurpuff", "Inkay", "Malamar", "Binacle", "Barbaracle", "Skrelp", "Dragalge", "Clauncher", "Clawitzer", "Helioptile", "Heliolisk", "Tyrunt", "Tyrantrum", "Amaura", "Aurorus", "Hawlucha", "Dedenne", "Carbink", "Goomy", "Sliggoo", "Goodra", "Klefki", "Phantump", "Trevenant", "Pumpkaboo", "Gourgeist", "Bergmite", "Avalugg", "Noibat", "Noivern", "Xerneas", "Yveltal", "Zygarde", "Diancie", "Hoopa", "Volcanion", "Magearna"))
Team <- c(LETTERS[1:min(teams,26)],
letters[ifelse(teams>26,1,0):ifelse(teams>26,min(teams-26,26),0)],
month.abb[ifelse(teams>52,1,0):ifelse(teams>52,min(teams-52,12),0)],
month.name[ifelse(teams>64,1,0):ifelse(teams>64,min(teams-64,12),0)],
pkmn[ifelse(teams>76,1,0):ifelse(teams>76,min(teams-76,722),0)])
}
if (is.null(strengths)) {
if (is.null(drawtype)) {
Strength <- seq(2,.001,length.out=teamsC)
} else {
if (is.null(arg1)) {
Strength <- (abs(drawtype(teamsC))+.001)
} else {
if (is.null(arg2)) {
Strength <- (abs(drawtype(teamsC,arg1))+.001)
} else {
if (is.null(arg3)) {
Strength <- (abs(drawtype(teamsC,arg1,arg2))+.001)
} else {
Strength <- (abs(drawtype(teamsC,arg1,arg2,arg3))+.001)
}
}
}
}
} else {
Strength <- strengths
}
if (swtch == FALSE) {
Strength <- rev(sort(Strength))
}
strengths <- Strength
cmprsn <- table(c("Bradley-Terry","Thurstone-Mosteller","Tie"))-1
fllcmp <- table(c("Bradley-Terry","Thurstone-Mosteller","Tie"))-1
TST <- data.frame(Team,Strength)
for (i in 1:simulations) {
if (is.null(drawtype)) {
df <- full.sim.gen(teams, weeks, strengths, divisions, gid, god, god.type, enddate, type)
} else {
if (is.null(arg1)) {
df <- full.sim.gen(teams, weeks, (abs(drawtype(teamsC))+.001), divisions, gid, god,
god.type, enddate, type)
} else {
if (is.null(arg2)) {
df <- full.sim.gen(teams, weeks, (abs(drawtype(teamsC,arg1))+.001), divisions, gid,
god, god.type, enddate, type)
} else {
if (is.null(arg3)) {
df <- full.sim.gen(teams, weeks, (abs(drawtype(teamsC,arg1,arg2))+.001), divisions, gid,
god, god.type, enddate, type)
} else {
df <- full.sim.gen(teams, weeks, (abs(drawtype(teamsC,arg1,arg2,arg3))+.001), divisions,
gid, god, god.type, enddate, type)
}
}
}
}
round <- dataconfigure(df)
pp <- progresspredict(df)
cmprsn <- cmprsn + pp$Comparison
if(pp$Comparison[1]==pp$Comparison[2]){
fllcmp <- fllcmp + c(0,0,1)
} else {
fllcmp <- fllcmp + ifelse(pp$Comparison==max(pp$Comparison),1,0)
}
pt <- pp$ProgressionTable
if (i == 1) {
plot(pt$Week,pt$ThurstoneMosteller,col=2,ylim=c(0,teams))
} else {
points(pt$Week,pt$ThurstoneMosteller,pch=i,col=2)
}
points(pt$Week,pt$BradleyTerry,pch=i,col=4,cex=.75)
samdf <- data.frame(Team=round$Team,WT=round$WinsTotal,MS=pp$FinalTMStrenghs,BTS=pp$FinalBTStrenghs)
prpTM <- table(c(TST[order(-TST$Strength),]$Team,1,0)==c(samdf[order(-samdf$TMS),]$Team,0,1))
prpTM <- prpTM-1
prcntTM <- c(prcntTM,prop.table(prpTM)[2])
prpBT <- table(c(TST[order(-TST$Strength),]$Team,1,0)==c(samdf[order(-samdf$BTS),]$Team,0,1))
prpBT <- prpBT-1
prcntBT <- c(prcntBT,prop.table(prpBT)[2])
strongTM[,i] <- pp$FinalTMStrenghs
strongBT[,i] <- pp$FinalBTStrenghs
strengthsTM <- ((i - 1) * strengthsTM + pp$FinalTMStrenghs)/i
strengthsBT <- ((i - 1) * strengthsBT + pp$FinalBTStrenghs)/i
wins <- ((i - 1) * wins + round$WinsTotal)/i
}
varsTM <- vector()
varsBT <- vector()
for (i in 1:N) {
varsTM[i] <- var(strongTM[i,])
varsBT[i] <- var(strongBT[i,])
}
biTM <- strengthsTM/mean(strengthsTM) - TST$Strength/mean(TST$Strength)
biBT <- strengthsBT/mean(strengthsBT) - TST$Strength/mean(TST$Strength)
newdf <- data.frame(TST$Team, strengthsBT, strengthsTM, wins)
names(newdf) <- c("Team","BradleyTerrySimulatedStrength","ThurstoneMostellerSimulatedStrength",
"WinsSummary")
prcntgs <- prop.table(cmprsn)
return(list(SimulatedData=newdf,BradleyTerryStrengths=strongBT,ThurstoneMostellerStrengths=strongM,
BradleyTerryVariance=varsBT,ThurstoneMostellerVariance=varsM,BradleyTerryBias=biBT,
ThurstoneMostellerBias=biM,BradleyTerryPercentPerfect=prcntBT,ThurstoneMostellerPercentPerfect=prcntM,
FullSimulationComparison=fllcmp,Comparison=cmprsn,Proportion=prcntgs))
}
sim1 <- sim.gen(5, 20)
View(sim1)
(fun <- LARC.Compare(sim1))
(fun <- LARC.Compare(sim1))
Comparison <- 1:48
Judge <- rep(c("Bob","Jim","Kara","Sally","Al","Rich","Bill","Ellen",
"Andrew","Ross","Mary","Jane"),4)
Winner <- c("Jim","Rich","Mary","Mary","Ellen","Sally","Sally","Al","Bill","Al","Jim",
"Sally","Bob","Ellen","Jane","Mary","Ellen","Jim","Jane","Kara","Ross","Ellen",
"Ellen","Sally","Sally","Mary","Jane","Mary","Jim","Mary","Sally","Bob","Bob",
"Bill","Ellen","Ellen","Jim","Jane","Bob","Mary","Kara","Bill","Bill","Andrew",
"Jim","Jim","Rich","Andrew")
Loser <- c("Kara","Ellen","Andrew","Al","Kara","Rich","Mary","Kara","Al","Jane","Andrew",
"Bob","Jim","Bill","Al","Al","Kara","Bob","Bill","Rich","Andrew","Andrew",
"Sally","Bob","Rich","Rich","Ross","Ross","Al","Jane","Ross","Andrew","Rich",
"Al","Jane","Bob","Mary","Rich","Bill","Ellen","Andrew","Bob","Sally","Ross",
"Kara","Ross","Jim","Ross")
EmployeeScores <- data.frame(Comparison,Judge,Winner,HPTS = 1,Loser,VPTS = 0,
Date = as.Date(Sys.Date()-2))
EmployeeScores$Winner <- as.character(EmployeeScores$Winner)
EmployeeScores$Loser <- as.character(EmployeeScores$Loser)
EmployeeScores$Home <- as.character(EmployeeScores$Winner)
EmployeeScores$Visitor <- as.character(EmployeeScores$Loser)
View(EmployeeScores)
dataconfigure <- function(df, reldate=Sys.Date()-1, forsim=FALSE) {
tt <- length(unique(c(df$Home,df$Visitor)))
if (forsim == TRUE) {
reldate <- Sys.Date() + 365
#These commented out lines may need to be readded, I cannot figure out the purpose they serve
# but they were causing issues with some datasets and I don't think omitting them causes any issues
} #else {
#LD <- length(which(df$Date <= reldate))
#while (is.na(df$HPTS[LD+1])) {
#  reldate <- reldate - 1
#  LD <- length(which(df$Date <= reldate))
#}
#}
#these first lines create a new dataframe with Team, Strength, and Wins
data <- data.frame(sort(unique(c(df$Home,df$Visitor))),rep(1,tt),
table(c(df$Winner[df$Date <= reldate],unique(c(df$Home,df$Visitor))))-1)
names(data) <- c("Team","Strength","Temp","WinsTotal")
data$Temp <- NULL
#the rest of the lines within the function create the versus matrix by first creating
# an empty ttxtt matrix and then filling it via a for loops.
mm <- matrix(0, tt, tt)
ww <- matrix(0, tt, tt)
pstn <- 0
for (i in data$Team){
for (n in data$Team){
pstn <- pstn + 1
x <- 0
z <- 0
for (y in 1:length(which(df$Date <= reldate))){
if(df$Home[y]==i && df$Visitor[y]==n){
x <- x + 1
if((df$HPTS[y] < df$VPTS[y]) && forsim == FALSE){
z <- z + 1
}
}
if(df$Home[y]==n && df$Visitor[y]==i){
x <- x + 1
if((df$HPTS[y] > df$VPTS[y]) && forsim == FALSE){
z <- z + 1
}
}
}
mm[pstn] <- x
if(forsim == FALSE) {
ww[pstn] <- z
}
}
}
data$Versus <- mm
data$WinsVersus <- ww
data$Team <- as.character(data$Team)
if (forsim == TRUE) {
data$WinsVersus <- NULL
data$WinsTotal <- NULL
}
return(data)
}
Employeedf <- dataconfigure(EmployeeScores)
View(Employeedf)
EmployeeRank <- LARC.Rank(Employeedf,MostellerLARC)
BradleyTerryLARC <- function(strengths,wins,magnificationfactor=1) {
PI <- 1
PIPI <- 1
W <- vector()
x <- 0
for (i in 1:length(strengths)) {
W[i] <- sum(wins[i,])
PI <- PI*strengths[i]^(W[i]+1)
for (j in (i+1):length(strengths)) {
if (j < length(strengths)+1) {
x <- x + 1
PIPI <- PIPI*(1/(strengths[i]+strengths[j])^(wins[i,j]+wins[j,i]))*magnificationfactor
}
}
}
return(exp(-sum(strengths))*PI*PIPI)
}
MostellerLARC <- function(strengths,wins,magnificationfactor=1) {
# First we compute the Prior
prior <- 1
for (i in 1: length(strengths)) { prior = prior * dnorm( strengths[i])*magnificationfactor}
# Now we compute the conditional
cond <- 1
for (i in 1:length(strengths)) {
for (j in 1:length(strengths)) {
cond <- cond*pnorm(strengths[i]-strengths[j])^wins[i,j]*magnificationfactor
}
}
# Now put the two together
post = prior * cond
return(post)
}
LARC.Posterior <- function(df, func = BradleyTerryLARC, mf=1, adj=1, report=FALSE) {
posterior <- func(df$Strength,df$WinsVersus,mf)
while (posterior == 0) {
mf <- mf + adj
posterior <- func(df$Strength,df$WinsVersus,mf)
}
while (posterior == Inf) {
mf <- mf - adj
posterior <- func(df$Strength,df$WinsVersus,mf)
}
if (report==TRUE){
return(c(posterior,mf))
} else {
return(posterior)
}
}
LARC.Optim <- function(df, func = BradleyTerryLARC, increment = 0.001,
iterations = Inf, magnificationfactor=1, adj=1) {
st <- df$Strength
wv <- df$WinsVersus
comp <- LARC.Posterior(df, func, mf = magnificationfactor, adj = adj)
options(digits = min(which( increment*10^(0:20)==floor(increment*10^(0:20)) )) - 1)
inc <- 0.1
last <- Inf
x <- 0
while ((comp != last & x < iterations) | inc >= increment) {
last <- comp
for (i in 1:nrow(df)) {
df$Strength[i] <- df$Strength[i] + inc
new <- LARC.Posterior(df, func, mf = magnificationfactor,adj=adj)
if (comp > new) {
df$Strength[i] <- df$Strength[i] - 2*inc
new <- LARC.Posterior(df, func, mf = magnificationfactor,adj=adj)
if (comp > new) {
df$Strength[i] <- df$Strength[i] + inc
} else {
comp <- new
}
} else {
comp <- new
}
}
if (comp == last) {
inc <- inc/10
}
x <- x + 1
}
return(list(UpdatedStrengths=df$Strength,MaximizedPosterior=comp,Iterations=x))
}
LARC.Rank <- function(df, func=BradleyTerryLARC, increment = 0.001,
iterations = Inf, dgt=3, magnificationfactor=1, adj=1) {
options(digits=dgt)
tt <- nrow(df)
length_strength <- length(df$Strength) # Get the length of strength
if_mosteller <- identical(func,MostellerLARC) # Check if MostellerLARC function is used
if (if_mosteller == TRUE){
for (i in 1:length_strength){
df$Strength[i] <- 0}# if MostellerLARC then change the initial strength to be Zero
}
if (is.null(df$WinsTotal)) {
for (i in 1:tt) {
df$WinsTotal[i] <- sum(df$WinsVersus[i,])
}
}
optimized <- LARC.Optim(df, func, increment, iterations, magnificationfactor,adj=adj)
df$UpdatedStrength <- round(optimized$UpdatedStrengths,dgt)
TempOrder <- df[order(-df$UpdatedStrength,-df$WinsTotal),]
Ranked <- data.frame(1:tt,TempOrder$Team,TempOrder$UpdatedStrength,TempOrder$WinsTotal)
names(Ranked) <- c("Rank","Team","Strength","WinsTotal")
Ranking <- data.frame(Ranked$Rank,as.character(Ranked$Team),Ranked$Strength,Ranked$WinsTotal)
names(Ranking) <- c("Rank","Team","Strength","WinsTotal")
return(Ranking)
}
vs <- matrix(c(0,1,
1,0),2,2)
vw <- matrix(c(0,0,
1,0),2,2)
Sample1 <- data.frame(1:2,c(1,0),1)
names(Sample1) <- c("Team","WinsTotal","Strength")
Sample1$Versus <- vs
Sample1$WinsVersus <- vw
Sample1
LARC.Rank(Sample1,BradleyTerryLARC)
LARC.Rank(Sample1,MostellerLARC)
vs <- matrix(c(0,2,
2,0),2,2)
vw <- matrix(c(0,0,
2,0),2,2)
Sample2 <- data.frame(1:2,c(1,0),1)
names(Sample2) <- c("Team","WinsTotal","Strength")
Sample2$Versus <- vs
Sample2$WinsVersus <- vw
Sample2
LARC.Rank(Sample2,BradleyTerryLARC)
LARC.Rank(Sample2,MostellerLARC)
vs <- matrix(c(0,2,
2,0),2,2)
vw <- matrix(c(0,1,
1,0),2,2)
Sample3 <- data.frame(1:2,c(1,0),1)
names(Sample3) <- c("Team","WinsTotal","Strength")
Sample3$Versus <- vs
Sample3$WinsVersus <- vw
Sample3
LARC.Rank(Sample3,BradleyTerryLARC)
LARC.Rank(Sample3,MostellerLARC)
vs <- matrix(c(0,1,0,
1,0,1,
0,1,0),3,3)
vw <- matrix(c(0,0,0,
1,0,0,
0,1,0),3,3)
Sample4 <- data.frame(1:3,c(1,1,0),1)
names(Sample4) <- c("Team","WinsTotal","Strength")
Sample4$Versus <- vs
Sample4$WinsVersus <- vw
Sample4
LARC.Rank(Sample4,BradleyTerryLARC)
LARC.Rank(Sample4,MostellerLARC)
vs <- matrix(c(0,1,0,0,0,0,0,
1,0,1,0,0,0,0,
0,1,0,1,0,0,0,
0,0,1,0,1,0,0,
0,0,0,1,0,1,0,
0,0,0,0,1,0,1,
0,0,0,0,0,1,0),7,7)
vw <- matrix(c(0,0,0,0,0,0,0,
1,0,0,0,0,0,0,
0,1,0,0,0,0,0,
0,0,1,0,0,0,0,
0,0,0,1,0,0,0,
0,0,0,0,1,0,0,
0,0,0,0,0,1,0),7,7)
Sample5 <- data.frame(1:7,c(1,1,1,1,1,1,0),1)
names(Sample5) <- c("Team","WinsTotal","Strength")
Sample5$Versus <- vs
Sample5$WinsVersus <- vw
Sample5
LARC.Rank(Sample5,BradleyTerryLARC)
LARC.Rank(Sample5,MostellerLARC)
vs <- matrix(c(0,1,1,1,
1,0,2,1,
1,2,0,1,
1,1,1,0),4,4)
vw <- matrix(c(0,0,0,0,
1,0,1,0,
1,1,0,0,
1,0,0,0),4,4)
Sample6 <- data.frame(1:4,c(3,2,1,0),1)
names(Sample6) <- c("Team","WinsTotal","Strength")
Sample6$Versus <- vs
Sample6$WinsVersus <- vw
Sample6
LARC.Rank(Sample6,BradleyTerryLARC)
LARC.Rank(Sample6,MostellerLARC)
EmployeeRank <- LARC.Rank(Employeedf,MostellerLARC)
View(EmployeeRank)
EmployeeRank <- LARC.Rank(Employeedf,BradleyTerryLARC)
EmployeeRank <- LARC.Rank(Employeedf,MostellerLARC)
EmployeeRank <- LARC.Rank(Employeedf,BradleyTerryLARC)
EmployeeRank1 <- LARC.Rank(Employeedf,MostellerLARC)
View(EmployeeRank)
Comparison <- 1:48
Judge <- rep(c("Bob","Jim","Kara","Sally","Al","Rich","Bill","Ellen",
"Andrew","Ross","Mary","Jane"),4)
Winner <- c("Jim","Rich","Mary","Mary","Ellen","Sally","Sally","Al","Bill","Al","Jim",
"Sally","Bob","Ellen","Jane","Mary","Ellen","Jim","Jane","Kara","Ross","Ellen",
"Ellen","Sally","Sally","Mary","Jane","Mary","Jim","Mary","Sally","Bob","Bob",
"Bill","Ellen","Ellen","Jim","Jane","Bob","Mary","Kara","Bill","Bill","Andrew",
"Jim","Jim","Rich","Andrew")
Loser <- c("Kara","Ellen","Andrew","Al","Kara","Rich","Mary","Kara","Al","Jane","Andrew",
"Bob","Jim","Bill","Al","Al","Kara","Bob","Bill","Rich","Andrew","Andrew",
"Sally","Bob","Rich","Rich","Ross","Ross","Al","Jane","Ross","Andrew","Rich",
"Al","Jane","Bob","Mary","Rich","Bill","Ellen","Andrew","Bob","Sally","Ross",
"Kara","Ross","Jim","Ross")
EmployeeScores <- data.frame(Comparison,Judge,Winner,HPTS = 1,Loser,VPTS = 0,
Date = as.Date(Sys.Date()-2))
View(EmployeeScores)
EmployeeScores$Winner <- as.character(EmployeeScores$Winner)
EmployeeScores$Loser <- as.character(EmployeeScores$Loser)
EmployeeScores$Home <- as.character(EmployeeScores$Winner)
EmployeeScores$Visitor <- as.character(EmployeeScores$Loser)
View(EmployeeScores)
test <- LARC.Compare(EmployeeScores)
test <- LARC.Compare(Employeedf)
